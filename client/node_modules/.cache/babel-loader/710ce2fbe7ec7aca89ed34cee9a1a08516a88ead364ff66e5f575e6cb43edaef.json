{"ast":null,"code":"// client/src/services/api.js\nimport axios from\"axios\";const API_URL=\"https://expression-tracker-backend.vercel.app/\";export const uploadImages=async(screenshot,webcamImage,sessionId)=>{try{if(!sessionId)throw new Error(\"Session ID is required for image upload.\");const formData=new FormData();formData.append(\"screenshot\",screenshot);formData.append(\"webcam\",webcamImage);formData.append(\"sessionId\",sessionId);const config={headers:{\"Content-Type\":\"multipart/form-data\"}};const response=await axios.post(`${API_URL}/upload?currentSessionId=${sessionId}`,formData,{headers:{\"Content-Type\":\"multipart/form-data\"}});return response.data;}catch(error){console.error(\"Error uploading images:\",error);throw error;}};export const fetchSessions=async()=>{try{const response=await axios.get(`${API_URL}/sessions`);// Assuming the response data has a 'sessions' property with an array of session IDs\nreturn response.data.sessions;}catch(error){console.error(\"Error fetching sessions:\",error);throw error;}};export const analyzeSession=async sessionId=>{try{const response=await axios.get(`${API_URL}/analyze/${sessionId}`);// Check if the response data has the expected structure\nif(response.data.imageAnalyses&&response.data.overallAnalysis){return{imageAnalyses:response.data.imageAnalyses,overallEmotions:response.data.overallAnalysis.emotions};}else{console.error(\"Invalid response data structure:\",response.data);throw new Error(\"Invalid response data structure\");}}catch(error){console.error(\"Error analyzing session:\",error);throw error;}};","map":{"version":3,"names":["axios","API_URL","uploadImages","screenshot","webcamImage","sessionId","Error","formData","FormData","append","config","headers","response","post","data","error","console","fetchSessions","get","sessions","analyzeSession","imageAnalyses","overallAnalysis","overallEmotions","emotions"],"sources":["C:/Users/sirig/OneDrive/Desktop/ps/expression_tracker(proper)/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\r\n\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"https://expression-tracker-backend.vercel.app/\";\r\n\r\nexport const uploadImages = async (screenshot, webcamImage, sessionId) => {\r\n  try {\r\n    if (!sessionId) throw new Error(\"Session ID is required for image upload.\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"screenshot\", screenshot);\r\n    formData.append(\"webcam\", webcamImage);\r\n    formData.append(\"sessionId\", sessionId);\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"multipart/form-data\",\r\n      },\r\n    };\r\n\r\n    const response = await axios.post(\r\n      `${API_URL}/upload?currentSessionId=${sessionId}`,\r\n      formData,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error uploading images:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchSessions = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/sessions`);\r\n    // Assuming the response data has a 'sessions' property with an array of session IDs\r\n    return response.data.sessions;\r\n  } catch (error) {\r\n    console.error(\"Error fetching sessions:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const analyzeSession = async (sessionId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/analyze/${sessionId}`);\r\n\r\n    // Check if the response data has the expected structure\r\n    if (response.data.imageAnalyses && response.data.overallAnalysis) {\r\n      return {\r\n        imageAnalyses: response.data.imageAnalyses,\r\n        overallEmotions: response.data.overallAnalysis.emotions,\r\n      };\r\n    } else {\r\n      console.error(\"Invalid response data structure:\", response.data);\r\n      throw new Error(\"Invalid response data structure\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error analyzing session:\", error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,OAAO,CAAG,gDAAgD,CAEhE,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAOC,UAAU,CAAEC,WAAW,CAAEC,SAAS,GAAK,CACxE,GAAI,CACF,GAAI,CAACA,SAAS,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,0CAA0C,CAAC,CAE3E,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,QAAQ,CAAC,CAAC,CAC/BD,QAAQ,CAACE,MAAM,CAAC,YAAY,CAAEN,UAAU,CAAC,CACzCI,QAAQ,CAACE,MAAM,CAAC,QAAQ,CAAEL,WAAW,CAAC,CACtCG,QAAQ,CAACE,MAAM,CAAC,WAAW,CAAEJ,SAAS,CAAC,CAEvC,KAAM,CAAAK,MAAM,CAAG,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CACF,CAAC,CAED,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAZ,KAAK,CAACa,IAAI,CAC/B,GAAGZ,OAAO,4BAA4BI,SAAS,EAAE,CACjDE,QAAQ,CACR,CACEI,OAAO,CAAE,CACP,cAAc,CAAE,qBAClB,CACF,CACF,CAAC,CACD,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,aAAa,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAI,CACF,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAZ,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,WAAW,CAAC,CACvD;AACA,MAAO,CAAAW,QAAQ,CAACE,IAAI,CAACK,QAAQ,CAC/B,CAAE,MAAOJ,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAK,cAAc,CAAG,KAAO,CAAAf,SAAS,EAAK,CACjD,GAAI,CACF,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAZ,KAAK,CAACkB,GAAG,CAAC,GAAGjB,OAAO,YAAYI,SAAS,EAAE,CAAC,CAEnE;AACA,GAAIO,QAAQ,CAACE,IAAI,CAACO,aAAa,EAAIT,QAAQ,CAACE,IAAI,CAACQ,eAAe,CAAE,CAChE,MAAO,CACLD,aAAa,CAAET,QAAQ,CAACE,IAAI,CAACO,aAAa,CAC1CE,eAAe,CAAEX,QAAQ,CAACE,IAAI,CAACQ,eAAe,CAACE,QACjD,CAAC,CACH,CAAC,IAAM,CACLR,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEH,QAAQ,CAACE,IAAI,CAAC,CAChE,KAAM,IAAI,CAAAR,KAAK,CAAC,iCAAiC,CAAC,CACpD,CACF,CAAE,MAAOS,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}