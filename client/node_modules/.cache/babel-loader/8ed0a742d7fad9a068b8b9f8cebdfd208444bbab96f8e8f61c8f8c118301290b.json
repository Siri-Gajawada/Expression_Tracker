{"ast":null,"code":"// client/src/services/api.js\n\nimport axios from \"axios\";\nconst API_URL = \"http://localhost:5000\";\nexport const uploadImages = async (screenshot, webcamImage) => {\n  try {\n    const formData = new FormData();\n    formData.append(\"screenshot\", screenshot);\n    formData.append(\"webcam\", webcamImage);\n\n    // Remove the 'Content-Type' header, as it's automatically set by Axios\n    const response = await axios.post(`${API_URL}/upload`, formData);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error uploading images:\", error);\n    throw error;\n  }\n};\nexport const fetchSessions = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/sessions`);\n    // Assuming the response data has a 'sessions' property with an array of session IDs\n    return response.data.sessions;\n  } catch (error) {\n    console.error(\"Error fetching sessions:\", error);\n    throw error;\n  }\n};\nexport const analyzeSession = async sessionId => {\n  try {\n    const response = await axios.get(`${API_URL}/analyze/${sessionId}`);\n\n    // Check if the response data has the expected structure\n    if (response.data.imageAnalyses && response.data.overallAnalysis) {\n      return {\n        imageAnalyses: response.data.imageAnalyses,\n        overallEmotions: response.data.overallAnalysis.emotions\n      };\n    } else {\n      console.error(\"Invalid response data structure:\", response.data);\n      throw new Error(\"Invalid response data structure\");\n    }\n  } catch (error) {\n    console.error(\"Error analyzing session:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_URL","uploadImages","screenshot","webcamImage","formData","FormData","append","response","post","data","error","console","fetchSessions","get","sessions","analyzeSession","sessionId","imageAnalyses","overallAnalysis","overallEmotions","emotions","Error"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/services/api.js"],"sourcesContent":["// client/src/services/api.js\r\n\r\nimport axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000\";\r\n\r\nexport const uploadImages = async (screenshot, webcamImage) => {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"screenshot\", screenshot);\r\n    formData.append(\"webcam\", webcamImage);\r\n\r\n    // Remove the 'Content-Type' header, as it's automatically set by Axios\r\n    const response = await axios.post(`${API_URL}/upload`, formData);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error uploading images:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const fetchSessions = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/sessions`);\r\n    // Assuming the response data has a 'sessions' property with an array of session IDs\r\n    return response.data.sessions;\r\n  } catch (error) {\r\n    console.error(\"Error fetching sessions:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const analyzeSession = async (sessionId) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/analyze/${sessionId}`);\r\n\r\n    // Check if the response data has the expected structure\r\n    if (response.data.imageAnalyses && response.data.overallAnalysis) {\r\n      return {\r\n        imageAnalyses: response.data.imageAnalyses,\r\n        overallEmotions: response.data.overallAnalysis.emotions,\r\n      };\r\n    } else {\r\n      console.error(\"Invalid response data structure:\", response.data);\r\n      throw new Error(\"Invalid response data structure\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error analyzing session:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,UAAU,EAAEC,WAAW,KAAK;EAC7D,IAAI;IACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEJ,UAAU,CAAC;IACzCE,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEH,WAAW,CAAC;;IAEtC;IACA,MAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGR,OAAO,SAAS,EAAEI,QAAQ,CAAC;IAEhE,OAAOG,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMR,KAAK,CAACc,GAAG,CAAC,GAAGb,OAAO,WAAW,CAAC;IACvD;IACA,OAAOO,QAAQ,CAACE,IAAI,CAACK,QAAQ;EAC/B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAOC,SAAS,IAAK;EACjD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMR,KAAK,CAACc,GAAG,CAAC,GAAGb,OAAO,YAAYgB,SAAS,EAAE,CAAC;;IAEnE;IACA,IAAIT,QAAQ,CAACE,IAAI,CAACQ,aAAa,IAAIV,QAAQ,CAACE,IAAI,CAACS,eAAe,EAAE;MAChE,OAAO;QACLD,aAAa,EAAEV,QAAQ,CAACE,IAAI,CAACQ,aAAa;QAC1CE,eAAe,EAAEZ,QAAQ,CAACE,IAAI,CAACS,eAAe,CAACE;MACjD,CAAC;IACH,CAAC,MAAM;MACLT,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEH,QAAQ,CAACE,IAAI,CAAC;MAChE,MAAM,IAAIY,KAAK,CAAC,iCAAiC,CAAC;IACpD;EACF,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}