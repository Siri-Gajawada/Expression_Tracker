{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sirig\\\\OneDrive\\\\Desktop\\\\ps\\\\expression_tracker(leela)\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '../services/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = ({\n  isGameActive\n}) => {\n  _s();\n  const [screenshot, setScreenshot] = useState(null);\n  const [webcamImage, setWebcamImage] = useState(null);\n  const videoRef = useRef(null);\n  const [sessionId, setSessionId] = useState(null);\n  const capturingRef = useRef(false);\n  const captureScreenshot = async () => {\n    const canvas = await html2canvas(document.body);\n    canvas.toBlob(blob => {\n      const file = new File([blob], 'screenshot.png', {\n        type: 'image/png'\n      });\n      setScreenshot(file);\n    }, 'image/png');\n  };\n  const captureWebcamImage = () => {\n    if (videoRef.current) {\n      const canvas = document.createElement('canvas');\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        const file = new File([blob], 'webcam.png', {\n          type: 'image/png'\n        });\n        setWebcamImage(file);\n      }, 'image/png');\n    }\n  };\n  const captureImages = () => {\n    if (!capturingRef.current) {\n      capturingRef.current = true;\n      captureScreenshot();\n      captureWebcamImage();\n      setTimeout(() => {\n        capturingRef.current = false;\n      }, 1000);\n    }\n  };\n  useEffect(() => {\n    const upload = async () => {\n      if (screenshot && webcamImage && sessionId) {\n        try {\n          await uploadImages(screenshot, webcamImage, sessionId);\n          console.log('Images uploaded successfully');\n          setScreenshot(null);\n          setWebcamImage(null);\n        } catch (error) {\n          console.error('Error uploading images:', error);\n        }\n      }\n    };\n    upload();\n  }, [screenshot, webcamImage, sessionId]);\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        const response = await fetch('http://localhost:5000/start-session');\n        const data = await response.json();\n        setSessionId(data.sessionId);\n      } catch (error) {\n        console.error('Error accessing webcam or creating session:', error);\n      }\n    };\n    startWebcam();\n    let intervalId;\n    if (isGameActive) {\n      intervalId = setInterval(captureImages, 5000);\n    } else {\n      clearInterval(intervalId);\n    }\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [isGameActive]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageCapture, \"FOWNjII7aywK7glnautEUbG8cks=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","useRef","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCapture","isGameActive","_s","screenshot","setScreenshot","webcamImage","setWebcamImage","videoRef","sessionId","setSessionId","capturingRef","captureScreenshot","canvas","document","body","toBlob","blob","file","File","type","captureWebcamImage","current","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","captureImages","setTimeout","upload","console","log","error","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","srcObject","response","fetch","data","json","intervalId","setInterval","clearInterval","children","ref","autoPlay","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sirig/OneDrive/Desktop/ps/expression_tracker(leela)/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '../services/api.js';\r\n\r\nconst ImageCapture = ({ isGameActive }) => {\r\n    const [screenshot, setScreenshot] = useState(null);\r\n    const [webcamImage, setWebcamImage] = useState(null);\r\n    const videoRef = useRef(null);\r\n    const [sessionId, setSessionId] = useState(null);\r\n    const capturingRef = useRef(false);\r\n\r\n    const captureScreenshot = async () => {\r\n        const canvas = await html2canvas(document.body);\r\n        canvas.toBlob(blob => {\r\n            const file = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n            setScreenshot(file);\r\n        }, 'image/png');\r\n    };\r\n\r\n    const captureWebcamImage = () => {\r\n        if (videoRef.current) {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = videoRef.current.videoWidth;\r\n            canvas.height = videoRef.current.videoHeight;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n            canvas.toBlob(blob => {\r\n                const file = new File([blob], 'webcam.png', { type: 'image/png' });\r\n                setWebcamImage(file);\r\n            }, 'image/png');\r\n        }\r\n    };\r\n\r\n    const captureImages = () => {\r\n        if (!capturingRef.current) {\r\n            capturingRef.current = true;\r\n            captureScreenshot();\r\n            captureWebcamImage();\r\n            setTimeout(() => {\r\n                capturingRef.current = false;\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const upload = async () => {\r\n            if (screenshot && webcamImage && sessionId) {\r\n                try {\r\n                    await uploadImages(screenshot, webcamImage, sessionId);\r\n                    console.log('Images uploaded successfully');\r\n                    setScreenshot(null);\r\n                    setWebcamImage(null);\r\n                } catch (error) {\r\n                    console.error('Error uploading images:', error);\r\n                }\r\n            }\r\n        };\r\n        upload();\r\n    }, [screenshot, webcamImage, sessionId]);\r\n\r\n    useEffect(() => {\r\n        const startWebcam = async () => {\r\n            try {\r\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n                if (videoRef.current) {\r\n                    videoRef.current.srcObject = stream;\r\n                }\r\n                const response = await fetch('http://localhost:5000/start-session');\r\n                const data = await response.json();\r\n                setSessionId(data.sessionId);\r\n            } catch (error) {\r\n                console.error('Error accessing webcam or creating session:', error);\r\n            }\r\n        };\r\n        startWebcam();\r\n\r\n        let intervalId;\r\n        if (isGameActive) {\r\n            intervalId = setInterval(captureImages, 5000);\r\n        } else {\r\n            clearInterval(intervalId);\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, [isGameActive]);\r\n\r\n    return (\r\n        <div>\r\n            <video ref={videoRef} autoPlay style={{ display: 'none' }} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}