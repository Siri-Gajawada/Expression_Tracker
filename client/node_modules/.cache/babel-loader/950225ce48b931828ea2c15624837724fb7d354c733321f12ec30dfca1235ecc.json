{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ashish\\\\2_1\\\\2_1_Project\\\\Actual_Project\\\\newdemo\\\\Webcapture_part\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '../services/api.js'; // Import your API function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = () => {\n  _s();\n  const [screenshot, setScreenshot] = useState(null);\n  const [webcamImage, setWebcamImage] = useState(null);\n  const videoRef = useRef(null);\n  const [sessionId, setSessionId] = useState(null); // Session ID for the session folder\n\n  // Function to capture a screenshot\n  const captureScreenshot = async () => {\n    const canvas = await html2canvas(document.body); // Capture the current view\n    canvas.toBlob(blob => {\n      const file = new File([blob], 'screenshot.png', {\n        type: 'image/png'\n      }); // Save as PNG\n      setScreenshot(file);\n    }, 'image/png');\n  };\n\n  // Function to capture webcam image\n  const captureWebcamImage = () => {\n    if (videoRef.current) {\n      const canvas = document.createElement('canvas');\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        const file = new File([blob], 'webcam.png', {\n          type: 'image/png'\n        }); // Save as PNG\n        setWebcamImage(file);\n      }, 'image/png');\n    }\n  };\n\n  // Upload images every 4 seconds\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      captureScreenshot();\n      captureWebcamImage();\n    }, 4000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  // Upload images when both are ready\n  useEffect(() => {\n    const upload = async () => {\n      if (screenshot && webcamImage && sessionId) {\n        try {\n          await uploadImages(screenshot, webcamImage, sessionId);\n          console.log('Images uploaded successfully');\n        } catch (error) {\n          console.error('Error uploading images:', error);\n        }\n      }\n    };\n    upload();\n  }, [screenshot, webcamImage, sessionId]);\n\n  // Start webcam and create session ID on component mount (session starts)\n  useEffect(() => {\n    const startWebcam = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n        // Request server to create a new session and get the session ID\n        const response = await fetch('http://localhost:5000/start-session');\n        const data = await response.json();\n        setSessionId(data.sessionId);\n      } catch (error) {\n        console.error('Error accessing webcam or creating session:', error);\n      }\n    };\n    startWebcam();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageCapture, \"vsffmGA9VleyKLXMpWpBmO1+cV8=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","useRef","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCapture","_s","screenshot","setScreenshot","webcamImage","setWebcamImage","videoRef","sessionId","setSessionId","captureScreenshot","canvas","document","body","toBlob","blob","file","File","type","captureWebcamImage","current","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","intervalId","setInterval","clearInterval","upload","console","log","error","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","srcObject","response","fetch","data","json","children","ref","autoPlay","style","display","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Ashish/2_1/2_1_Project/Actual_Project/newdemo/Webcapture_part/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '../services/api.js';  // Import your API function\r\n\r\nconst ImageCapture = () => {\r\n    const [screenshot, setScreenshot] = useState(null);\r\n    const [webcamImage, setWebcamImage] = useState(null);\r\n    const videoRef = useRef(null);\r\n    const [sessionId, setSessionId] = useState(null); // Session ID for the session folder\r\n\r\n    // Function to capture a screenshot\r\n    const captureScreenshot = async () => {\r\n        const canvas = await html2canvas(document.body); // Capture the current view\r\n        canvas.toBlob(blob => {\r\n            const file = new File([blob], 'screenshot.png', { type: 'image/png' }); // Save as PNG\r\n            setScreenshot(file);\r\n        }, 'image/png');\r\n    };\r\n\r\n    // Function to capture webcam image\r\n    const captureWebcamImage = () => {\r\n        if (videoRef.current) {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = videoRef.current.videoWidth;\r\n            canvas.height = videoRef.current.videoHeight;\r\n            const ctx = canvas.getContext('2d');\r\n            ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n            canvas.toBlob(blob => {\r\n                const file = new File([blob], 'webcam.png', { type: 'image/png' }); // Save as PNG\r\n                setWebcamImage(file);\r\n            }, 'image/png');\r\n        }\r\n    };\r\n\r\n    // Upload images every 4 seconds\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            captureScreenshot();\r\n            captureWebcamImage();\r\n        }, 4000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    // Upload images when both are ready\r\n    useEffect(() => {\r\n        const upload = async () => {\r\n            if (screenshot && webcamImage && sessionId) {\r\n                try {\r\n                    await uploadImages(screenshot, webcamImage, sessionId);\r\n                    console.log('Images uploaded successfully');\r\n                } catch (error) {\r\n                    console.error('Error uploading images:', error);\r\n                }\r\n            }\r\n        };\r\n        upload();\r\n    }, [screenshot, webcamImage, sessionId]);\r\n\r\n    // Start webcam and create session ID on component mount (session starts)\r\n    useEffect(() => {\r\n        const startWebcam = async () => {\r\n            try {\r\n                const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n                if (videoRef.current) {\r\n                    videoRef.current.srcObject = stream;\r\n                }\r\n                // Request server to create a new session and get the session ID\r\n                const response = await fetch('http://localhost:5000/start-session');\r\n                const data = await response.json();\r\n                setSessionId(data.sessionId);\r\n            } catch (error) {\r\n                console.error('Error accessing webcam or creating session:', error);\r\n            }\r\n        };\r\n        startWebcam();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <video ref={videoRef} autoPlay style={{ display: 'none' }} /> {/* Hidden video element */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}