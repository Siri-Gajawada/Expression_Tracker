{"ast":null,"code":"// src/components/GameComponent.jsx\nimport React,{useState,useEffect}from'react';import'./GameComponent.css';import ImageCapture from'./ImageCaptureComponent';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const shapes=['circle','square','triangle'];function shuffleArray(array){for(let i=array.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[array[i],array[j]]=[array[j],array[i]];}return array;}function GameComponent(){const[currentQuestion,setCurrentQuestion]=useState(0);const[selectedAnswer,setSelectedAnswer]=useState(null);const[score,setScore]=useState(0);const[questions,setQuestions]=useState([]);const[isAnswered,setIsAnswered]=useState(false);const[isCorrect,setIsCorrect]=useState(null);const[shuffledOptions,setShuffledOptions]=useState([]);const[streak,setStreak]=useState(0);const[isGameActive,setIsGameActive]=useState(true);const[sessionId,setSessionId]=useState(null);const username=localStorage.getItem('username');const startSession=async()=>{try{const response=await fetch(`http://localhost:5000/start-session?username=${username}`);const data=await response.json();setSessionId(data.sessionId);}catch(error){console.error('Error creating session:',error);}};useEffect(()=>{startSession();},[]);useEffect(()=>{const newQuestions=Array(5).fill(null).map(()=>{const randomShape=shapes[Math.floor(Math.random()*shapes.length)];const randomCount=Math.floor(Math.random()*5)+1;const sequence=Array(randomCount).fill(randomShape).concat(Array(9-randomCount).fill(null).map(()=>shapes[Math.floor(Math.random()*shapes.length)]));const correctAnswer=sequence.filter(s=>s===randomShape).length;let options=[correctAnswer];while(options.length<4){const randomOption=Math.floor(Math.random()*5)+1;if(!options.includes(randomOption)){options.push(randomOption);}}return{shape:randomShape,sequence,correctAnswer,options:shuffleArray([...options])};});setQuestions(newQuestions);},[]);useEffect(()=>{if(questions.length>0&&currentQuestion<questions.length){setShuffledOptions(questions[currentQuestion].options);}},[currentQuestion,questions]);const handleAnswer=async answer=>{if(!isAnswered){setSelectedAnswer(answer);setIsAnswered(true);const correctAnswer=questions[currentQuestion].correctAnswer;const correct=answer===correctAnswer;setIsCorrect(correct);if(correct){setScore(score+1);setStreak(streak+1);}else{setStreak(0);}}};const nextQuestion=()=>{setSelectedAnswer(null);setIsAnswered(false);setIsCorrect(null);if(currentQuestion<questions.length-1){setCurrentQuestion(currentQuestion+1);}else{//endSession();\nsetIsGameActive(false);}};const restartGame=async()=>{await startSession();setScore(0);setCurrentQuestion(0);setSelectedAnswer(null);setIsAnswered(false);setIsCorrect(null);setStreak(0);setIsGameActive(true);const newQuestions=Array(5).fill(null).map(()=>{const randomShape=shapes[Math.floor(Math.random()*shapes.length)];const randomCount=Math.floor(Math.random()*5)+1;const sequence=Array(randomCount).fill(randomShape).concat(Array(9-randomCount).fill(null).map(()=>shapes[Math.floor(Math.random()*shapes.length)]));const correctAnswer=sequence.filter(s=>s===randomShape).length;let options=[correctAnswer];while(options.length<4){const randomOption=Math.floor(Math.random()*5)+1;if(!options.includes(randomOption)){options.push(randomOption);}}return{shape:randomShape,sequence,correctAnswer,options:shuffleArray([...options])};});setQuestions(newQuestions);};const getSmiley=()=>{if(!isAnswered)return'😊';if(isCorrect)return streak>1?'😁':'😃';return'😢';};if(questions.length===0)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});if(!isGameActive){return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"game-title\",children:\"Shape Counting Game\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"result\",children:[\"Your score: \",score,\" / \",questions.length]}),/*#__PURE__*/_jsx(\"button\",{className:\"restart-btn\",onClick:restartGame,\"aria-label\":\"Play Again\",children:\"Play Again\"})]})]});}const{shape,sequence,options}=questions[currentQuestion];return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[isGameActive&&sessionId&&/*#__PURE__*/_jsx(ImageCapture,{sessionId:sessionId,isActive:isGameActive}),/*#__PURE__*/_jsx(\"h1\",{className:\"game-title\",children:\"Shape Counting Game\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"How many \",/*#__PURE__*/_jsxs(\"span\",{className:\"target-shape\",children:[shape,\"s\"]}),\" are in the sequence?\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"shape-sequence\",children:sequence.map((s,index)=>/*#__PURE__*/_jsx(\"div\",{className:`shape ${s} ${isCorrect===false?'sad':''}`,\"aria-label\":`A ${s}`,children:s&&/*#__PURE__*/_jsx(\"span\",{className:\"smiley\",children:getSmiley()})},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"options-container\",children:shuffledOptions.map((option,index)=>/*#__PURE__*/_jsx(\"button\",{className:`option-btn ${isAnswered?option===questions[currentQuestion].correctAnswer?'correct':option===selectedAnswer?'incorrect':'':''}`,onClick:()=>handleAnswer(option),disabled:isAnswered,\"aria-label\":`Select ${option}`,children:option},index))}),selectedAnswer!==null&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{className:\"result\",children:isCorrect?'Correct!':`Wrong! The correct answer was ${questions[currentQuestion].correctAnswer}.`}),/*#__PURE__*/_jsx(\"button\",{className:\"next-btn\",onClick:nextQuestion,\"aria-label\":\"Next Question\",children:\"Next Question\"})]})]})]});}export default GameComponent;","map":{"version":3,"names":["React","useState","useEffect","ImageCapture","jsx","_jsx","jsxs","_jsxs","shapes","shuffleArray","array","i","length","j","Math","floor","random","GameComponent","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","score","setScore","questions","setQuestions","isAnswered","setIsAnswered","isCorrect","setIsCorrect","shuffledOptions","setShuffledOptions","streak","setStreak","isGameActive","setIsGameActive","sessionId","setSessionId","username","localStorage","getItem","startSession","response","fetch","data","json","error","console","newQuestions","Array","fill","map","randomShape","randomCount","sequence","concat","correctAnswer","filter","s","options","randomOption","includes","push","shape","handleAnswer","answer","correct","nextQuestion","restartGame","getSmiley","children","className","onClick","isActive","index","option","disabled"],"sources":["C:/Users/sirig/OneDrive/Desktop/ps/expression_tracker(proper)/client/src/components/GameComponent.jsx"],"sourcesContent":["// src/components/GameComponent.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport './GameComponent.css';\r\nimport ImageCapture from './ImageCaptureComponent';\r\n\r\nconst shapes = ['circle', 'square', 'triangle'];\r\n\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction GameComponent() {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n  const [shuffledOptions, setShuffledOptions]  = useState([]);\r\n  const [streak, setStreak] = useState(0);\r\n  const [isGameActive, setIsGameActive] = useState(true);\r\n  const [sessionId, setSessionId] = useState(null);\r\n  const username = localStorage.getItem('username');\r\n\r\n  const startSession = async () => {\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/start-session?username=${username}`);\r\n      const data = await response.json();\r\n      setSessionId(data.sessionId);\r\n    } catch (error) {\r\n      console.error('Error creating session:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    startSession();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const newQuestions = Array(5)\r\n      .fill(null)\r\n      .map(() => {\r\n        const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n        const randomCount = Math.floor(Math.random() * 5) + 1;\r\n        const sequence = Array(randomCount)\r\n          .fill(randomShape)\r\n          .concat(\r\n            Array(9 - randomCount).fill(null).map(() => \r\n              shapes[Math.floor(Math.random() * shapes.length)])\r\n          );\r\n\r\n        const correctAnswer = sequence.filter((s) => s === randomShape).length;\r\n        let options = [correctAnswer];\r\n        while (options.length < 4) {\r\n          const randomOption = Math.floor(Math.random() * 5) + 1;\r\n          if (!options.includes(randomOption)) {\r\n            options.push(randomOption);\r\n          }\r\n        }\r\n\r\n        return {\r\n          shape: randomShape,\r\n          sequence,\r\n          correctAnswer,\r\n          options: shuffleArray([...options])\r\n        };\r\n      });\r\n    setQuestions(newQuestions);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (questions.length > 0 && currentQuestion < questions.length) {\r\n      setShuffledOptions(questions[currentQuestion].options);\r\n    }\r\n  }, [currentQuestion, questions]);\r\n\r\n  const handleAnswer = async (answer) => {\r\n    if (!isAnswered) {\r\n      setSelectedAnswer(answer);\r\n      setIsAnswered(true);\r\n\r\n      const correctAnswer = questions[currentQuestion].correctAnswer;\r\n      const correct = answer === correctAnswer;\r\n      setIsCorrect(correct);\r\n\r\n      if (correct) {\r\n        setScore(score + 1);\r\n        setStreak(streak + 1);\r\n      } else {\r\n        setStreak(0);\r\n      }\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setSelectedAnswer(null);\r\n    setIsAnswered(false);\r\n    setIsCorrect(null);\r\n    \r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      //endSession();\r\n      setIsGameActive(false);\r\n    }\r\n  };\r\n  \r\n  const restartGame = async () => {\r\n    await startSession();\r\n    setScore(0);\r\n    setCurrentQuestion(0);\r\n    setSelectedAnswer(null);\r\n    setIsAnswered(false);\r\n    setIsCorrect(null);\r\n    setStreak(0);\r\n    setIsGameActive(true);\r\n    \r\n    const newQuestions = Array(5)\r\n      .fill(null)\r\n      .map(() => {\r\n        const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n        const randomCount = Math.floor(Math.random() * 5) + 1;\r\n        const sequence = Array(randomCount)\r\n          .fill(randomShape)\r\n          .concat(\r\n            Array(9 - randomCount).fill(null).map(() => \r\n              shapes[Math.floor(Math.random() * shapes.length)])\r\n          );\r\n\r\n        const correctAnswer = sequence.filter((s) => s === randomShape).length;\r\n        let options = [correctAnswer];\r\n        while (options.length < 4) {\r\n          const randomOption = Math.floor(Math.random() * 5) + 1;\r\n          if (!options.includes(randomOption)) {\r\n            options.push(randomOption);\r\n          }\r\n        }\r\n\r\n        return {\r\n          shape: randomShape,\r\n          sequence,\r\n          correctAnswer,\r\n          options: shuffleArray([...options])\r\n        };\r\n      });\r\n    setQuestions(newQuestions);\r\n  };\r\n\r\n  const getSmiley = () => {\r\n    if (!isAnswered) return '😊';\r\n    if (isCorrect) return streak > 1 ? '😁' : '😃';\r\n    return '😢';\r\n  };\r\n\r\n  if (questions.length === 0) return <div>Loading...</div>;\r\n\r\n  if (!isGameActive) {\r\n    return (\r\n      <div className=\"app\">\r\n        <h1 className=\"game-title\">Shape Counting Game</h1>\r\n        <div className=\"game-container\">\r\n          <p className=\"result\">Your score: {score} / {questions.length}</p>\r\n          <button\r\n            className=\"restart-btn\"\r\n            onClick={restartGame}\r\n            aria-label=\"Play Again\"\r\n          >\r\n            Play Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const { shape, sequence, options } = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {isGameActive && sessionId && (\r\n        <ImageCapture \r\n          sessionId={sessionId} \r\n          isActive={isGameActive} \r\n          \r\n        />\r\n      )}\r\n      <h1 className=\"game-title\">Shape Counting Game</h1>\r\n      <div className=\"game-container\">\r\n        <h3>How many <span className=\"target-shape\">{shape}s</span> are in the sequence?</h3>\r\n        <div className=\"shape-sequence\">\r\n          {sequence.map((s, index) => (\r\n            <div \r\n              key={index} \r\n              className={`shape ${s} ${isCorrect === false ? 'sad' : ''}`}\r\n              aria-label={`A ${s}`}\r\n            >\r\n              {s && <span className=\"smiley\">{getSmiley()}</span>}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"options-container\">\r\n          {shuffledOptions.map((option, index) => (\r\n            <button\r\n              key={index}\r\n              className={`option-btn ${\r\n                isAnswered\r\n                  ? option === questions[currentQuestion].correctAnswer\r\n                    ? 'correct'\r\n                    : option === selectedAnswer\r\n                    ? 'incorrect'\r\n                    : ''\r\n                  : ''\r\n              }`}\r\n              onClick={() => handleAnswer(option)}\r\n              disabled={isAnswered}\r\n              aria-label={`Select ${option}`}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        {selectedAnswer !== null && (\r\n          <div>\r\n            <p className=\"result\">\r\n              {isCorrect \r\n                ? 'Correct!' \r\n                : `Wrong! The correct answer was ${questions[currentQuestion].correctAnswer}.`}\r\n            </p>\r\n            <button\r\n              className=\"next-btn\"\r\n              onClick={nextQuestion}\r\n              aria-label=\"Next Question\"\r\n            >\r\n              Next Question\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}